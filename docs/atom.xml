<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>bernhard&#x27;s little universe</title>
    <link href="https://bernh.net/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://bernh.net"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-01-05T00:00:00+00:00</updated>
    <id>https://bernh.net/atom.xml</id>
    <entry xml:lang="en">
        <title>Rewrite this site - yet another time</title>
        <published>2024-01-05T00:00:00+00:00</published>
        <updated>2024-01-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://bernh.net/blog/rewrite/" type="text/html"/>
        <id>https://bernh.net/blog/rewrite/</id>
        
        <content type="html">&lt;p&gt;Yet another time that I rewrote this page basically from scratch. Basic motivation
this time is the idea to start a semi-regular blog. Chances that this will really 
happen are slim but you never know. At least I have a couple of things in mind that
may be interesting topics.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Old habbits - good habbits?</title>
        <published>2023-11-20T00:00:00+00:00</published>
        <updated>2023-11-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://bernh.net/drafts/habbits/" type="text/html"/>
        <id>https://bernh.net/drafts/habbits/</id>
        
        <content type="html">&lt;p&gt;While learning multiple programming languages in the past, C was the first language
that I used professionally. While reading chapter 1.1 I noticed a personal habbit 
that originates from these times. Or should I say from the deficencies of this language?
C differentiates between declaration and definition and requires declaration before usage. 
Without going into the details what this exactly means, it bascially boils down to this 
typical structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#fafafa;color:#80cbc4;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;font-style:italic;color:#7c4dff;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6182b8;&quot;&gt;helper_function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39adb5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7c4dff;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f76d47;&quot;&gt;param&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39adb5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ccd7da;&quot;&gt;&#x2F;&#x2F; ... do something and return
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39adb5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7c4dff;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6182b8;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39adb5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7c4dff;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f76d47;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39adb5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7c4dff;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39adb5;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f76d47;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39adb5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ccd7da;&quot;&gt;&#x2F;&#x2F; ... whatever
&lt;&#x2F;span&gt;&lt;span&gt;  x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#39adb5;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6182b8;&quot;&gt;helper_function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39adb5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6182b8;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39adb5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ccd7da;&quot;&gt;&#x2F;&#x2F; ... continue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#39adb5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;helper_function&lt;&#x2F;code&gt; needs to be &lt;em&gt;above&lt;&#x2F;em&gt; the &lt;code&gt;main&lt;&#x2F;code&gt; function otherwise the 
compiler will complain. (&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: Yes, I know, technically only the declaration needs to be above
but this is the way I ended up writing 99% of my C code.) Whenever a new function needs to
be introduced, go up and insert above. &lt;&#x2F;p&gt;
&lt;p&gt;And I realized that I&#x27;m doing this also in my Python (&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: In Python there is of course this 
weird &lt;code&gt;if __name__ == &amp;quot;__main__&amp;quot;&lt;&#x2F;code&gt; thing but I always call &lt;code&gt;main()&lt;&#x2F;code&gt; there and this function can be on the top) and Rust code while it&#x27;s not necessary
there. This observation sent me down a rabbit hole of stack overflow questions and tons of
advice for different programming languages. Anyway, I have made a decision: I will write code
top-to-bottom in the future.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
